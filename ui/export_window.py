"""
AUTHOR: Ebin Paul

DESCRIPTION: The ExportVisualisationWindow class is a PyQt5 dialog window designed 
             to facilitate the export of visualizations generated by the VisualiseNetwork 
             class. This export functionality allows users to save the visual representation 
             of the network in different file formats based on their preferences.

REFERENCES:
    - https://pythonspot.com/pyqt5-file-dialog/
    - https://www.pythonguis.com/docs/qcombobox/
"""


import os
from enum import Enum

from PyQt5.QtWidgets import (QComboBox, QDialog, QFileDialog, QHBoxLayout,
                             QLabel, QMessageBox, QPushButton, QVBoxLayout)

from ui.alert_window import MessageBox
from utils.visualizer import VisualiseNetwork


class NetworkLayout(Enum):
    SPRING = "Spring"
    RANDOM = "Random"
    SHELL = "Shell"
    CIRCULAR = "Circular"
    PLANAR = "Planar"


FILE_TYPES = {
    "PNG": "png",
    "JPEG": "jpeg",
    "PDF": "pdf",
}


class ExportVisualisationWindow(QDialog):
    def __init__(self, network: VisualiseNetwork):
        """
        Initialize the ExportVisualisationWindow.

        Parameters:
            network (VisualiseNetwork): The network to be visualized and exported.
        """
        super().__init__()
        self.setFixedSize(300, 200)
        self.network = network
        self.network.build_export_plot()
        self.file_type = FILE_TYPES["PNG"]
        self.network_layout = NetworkLayout.SPRING.value

        self.setup_widgets()
        self.setup_layout()
        self.setWindowTitle("Export Visualisation")

    def setup_widgets(self):
        """Set up the widgets for the export window."""
        self.layout_label = QLabel("Choose Layout:")
        self.layout_dropdown = QComboBox()
        for layout in NetworkLayout:
            self.layout_dropdown.addItem(layout.value)
        self.layout_dropdown.currentIndexChanged.connect(self.update_layout)

        self.file_type_label = QLabel("File Type:")
        self.file_type_dropdown = QComboBox()
        for file_type in FILE_TYPES:
            self.file_type_dropdown.addItem(file_type)
        self.file_type_dropdown.currentIndexChanged.connect(self.update_file_type)

        self.export_button = QPushButton("Export")
        self.export_button.clicked.connect(self.do_export)

        self.preview_button = QPushButton("Preview")
        self.preview_button.clicked.connect(self.preview_export)

    def setup_layout(self):
        """Set up the layout for the export window."""
        layout = QVBoxLayout()
        layout.addWidget(self.layout_label)
        layout.addWidget(self.layout_dropdown)
        layout.addWidget(self.file_type_label)
        layout.addWidget(self.file_type_dropdown)

        button_layout = QHBoxLayout()
        button_layout.addWidget(self.preview_button)
        button_layout.addWidget(self.export_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

    def update_layout(self, index):
        """
        Update the network layout when the dropdown selection changes.

        Parameters:
            index (int): The index of the selected layout option.
        """
        self.network_layout = NetworkLayout(self.layout_dropdown.currentText()).value
        self.network.build_export_plot(self.network_layout)

    def update_file_type(self, index):
        """
        Update the file type when the dropdown selection changes.

        Parameters:
            index (int): The index of the selected file type option.
        """
        self.file_type = FILE_TYPES[self.file_type_dropdown.currentText()]

    def preview_export(self):
        """Preview the network export."""
        self.network.preview_export()

    def do_export(self):
        """Export the network visualization to the selected file path."""
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getSaveFileName(
            self,
            "Save File",
            "",
            f"{self.file_type} Files (*.{self.file_type.lower()})",
        )
        if file_path:
            filename = os.path.basename(file_path)
            if filename:
                self.network.export_to_file(
                    file_path=file_path,
                    file_type=self.file_type,
                )
                self.accept()
            else:
                error_message = MessageBox(
                    "Error",
                    "Please enter a filename.",
                    QMessageBox.warning,
                    QMessageBox.Ok | QMessageBox.Cancel,
                )
